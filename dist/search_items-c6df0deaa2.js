searchNodes=[{"doc":"","ref":"gnawex.html","title":"GNAWEX","type":"extras"},{"doc":"There isn't much to setup here since GNAWEX is still in its infancy. I'm currently working on the database side of things before I start working on the application-level, since PostgreSQL is surprisingly powerful, more than I definitely expected.","ref":"setup.html","title":"Setup","type":"extras"},{"doc":"I'm using version 14.1 of PostgreSQL, although 14.x should be fine. I don't guarantee backwards compatibility with &lt;14 because it's tiring. Creating gnawex_db If you're using NixOS, you're in luck. In your configuration.nix file, just add this: services.postgresql = { enable = true; package = pkgs.postgresql_14; authentication = pkgs.lib.mkOverride 14 '' local all all trust host all all ::1/128 trust ''; }; This sets up a PostgreSQL server with a default user postgres (no password). Currently, I'm not utilizing permissions and policies so using the default postgres user is fine. The project assumes you named the database as gnawex_db , which you can do with createdb gnawex_db --user postgres . Running migration scripts The migration scripts can be found in migrations/ at the project root. You can manually load each .sql file with \\i path/to/file.sql . If you're using fish shell, you could do this: # Load the functions source bin/functions.fish migrate Why manually write this? I'm manually managing migration files since this project isn't that large, and neither is it that important where I need utmost care. It's a great exercise to manually write migration files anyway.","ref":"setup.html#database","title":"Setup - Database","type":"extras"},{"doc":"In the future, I'm going to rely on Makefile instead of fish scripts since it's tedious to manually load the script into the environment. For these scripts to work, you need psql and postgresql setup. psql comes with postgresql .","ref":"available-scripts.html","title":"Available scripts","type":"extras"},{"doc":"Takes all migration files from migrations/ , and loads it in gnawex_db . # This is pretty much it migrate","ref":"available-scripts.html#migrate","title":"Available scripts - migrate","type":"extras"},{"doc":"seed-db expects 1 argument, which can either be dev , or prod . If you're using this for a dev environment, use dev , otherwise if it's for production then use prod . You know how it goes. The seed files are in seeds/ as .csv with headers, and delimited with , . Here are the files those two look for: seed-db dev seeds/users.csv : Dummy users seeds/items.csv : Tradable MouseHunt items seeds/listings.csv : Dummy listings seed-db prod : TODO","ref":"available-scripts.html#seed-db","title":"Available scripts - seed-db","type":"extras"},{"doc":"Drops gnawex_db .","ref":"available-scripts.html#drop-db","title":"Available scripts - drop-db","type":"extras"},{"doc":"This is a convenience function that resets gnawex_db . drop-db createdb gnawex_db --user postgres migrate seed-db dev # Or you could just run this: reset-db","ref":"available-scripts.html#reset-db","title":"Available scripts - reset-db","type":"extras"}]