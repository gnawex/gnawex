searchNodes=[{"doc":"","ref":"gnawex.html","title":"GNAWEX","type":"extras"},{"doc":"There isn't much to setup here since GNAWEX is still in its infancy. I'm currently working on the database side of things before I start working on the application-level, since PostgreSQL is surprisingly powerful, more than I definitely expected.","ref":"setup.html","title":"Setup","type":"extras"},{"doc":"I'm using version 14.1 of PostgreSQL, although 14.x should be fine. I don't guarantee backwards compatibility with &lt;14 because it's tiring. Creating gnawex_db If you're using NixOS, you're in luck. In your configuration.nix file, just add this: services.postgresql = { enable = true; package = pkgs.postgresql_14; authentication = pkgs.lib.mkOverride 14 '' local all all trust host all all ::1/128 trust ''; }; This sets up a PostgreSQL server with a default user postgres (no password). Currently, I'm not utilizing permissions and policies so using the default postgres user is fine. The project assumes you named the database as gnawex_db , which you can do with createdb gnawex_db --user postgres . Running migration scripts The migration scripts can be found in migrations/ at the project root. You can manually load each .sql file with \\i path/to/file.sql . If you're using fish shell, you could do this: # Load the functions source bin/functions.fish migrate Why manually write this? I'm manually managing migration files since this project isn't that large, and neither is it that important where I need utmost care. It's a great exercise to manually write migration files anyway. pgAdmin pgAdmin can be pretty useful, and I personally use it for EXPLAIN to understand the query planner better. You can either set it up manually, or use nix. # At the project root, `gnawex/` # Run the nix shell. If you&#39;re using nix-direnv, then it should automatically # load the environment for you. So you can skip this, if ever. nix develop # If you&#39;re using sudo, replace doas with sudo doas pgadmin4 You'll need elevated privileges since pgadmin needs write permissions in /var/lib/pgadmin . Doing this for the first time will ask for credentials you want to set, it doesn't really matter since it's just for a dev env, just remember it. You should see something like this: sekun@nixos ~/P/gnawex (main) [1]&gt; doas pgadmin4 doas (sekun@nixos) password: NOTE: Configuring authentication for SERVER mode. Enter the email address and password to use for the initial pgAdmin user account: Email address: postgres@example.com Password: Retype password: Starting pgAdmin 4. Please navigate to http://127.0.0.1:5050 in your browser. 2022-03-01 12:12:37,060: WARNING werkzeug: WebSocket transport not available. Install eventlet or gevent and gevent-websocket for improved performance. * Serving Flask app &#39;pgadmin&#39; (lazy loading) * Environment: production WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Debug mode: off pgadmin should be available in the URL specified above. In my case, it's http://127.0.0.1:5050.","ref":"setup.html#database","title":"Setup - Database","type":"extras"},{"doc":"In the future, I'm going to rely on Makefile instead of fish scripts since it's tedious to manually load the script into the environment. For these scripts to work, you need psql and postgresql setup. psql comes with postgresql .","ref":"available-scripts.html","title":"Available scripts","type":"extras"},{"doc":"Takes all migration files from migrations/ , and loads it in gnawex_db . # This is pretty much it migrate","ref":"available-scripts.html#migrate","title":"Available scripts - migrate","type":"extras"},{"doc":"seed-db expects 1 argument, which can either be dev , or prod . If you're using this for a dev environment, use dev , otherwise if it's for production then use prod . You know how it goes. The seed files are in seeds/ as .csv with headers, and delimited with , . Here are the files those two look for: seed-db dev seeds/users.csv : Dummy users seeds/items.csv : Tradable MouseHunt items seeds/listings.csv : Dummy listings seed-db prod : TODO","ref":"available-scripts.html#seed-db","title":"Available scripts - seed-db","type":"extras"},{"doc":"Drops gnawex_db .","ref":"available-scripts.html#drop-db","title":"Available scripts - drop-db","type":"extras"},{"doc":"This is a convenience function that resets gnawex_db . drop-db createdb gnawex_db --user postgres migrate seed-db dev # Or you could just run this: reset-db","ref":"available-scripts.html#reset-db","title":"Available scripts - reset-db","type":"extras"},{"doc":"Roles are used to determine who can perform what operation in the database. There are two kinds of roles, but they can be related in some way. The difference is on where it exists.","ref":"roles.html","title":"Roles","type":"extras"},{"doc":"These ones are defined with CREATE TYPE ROLE as ENUM (...) . These are the roles you'll see in GNAWEX. So far, none of these roles were worked on since the DB is still actively worked on. Although, here is what I have in mind: admin : The system administrator Can appoint moderators Maintain items Privileges like banning/unbanning users and mods mod : Moderates the platform user : Traders, basically Anything the user can do, the mod and admin can as well. So all roles here are able to create listings.","ref":"roles.html#user-roles","title":"Roles - User roles","type":"extras"},{"doc":"Database roles exist because I'm deferring authorization to Postgres. You can get the list of roles in the DB by running this in psql : \\du ; and this would show something like this: gnawex_db =&gt; \\ du List of roles Role name | Attributes | Member of -- -- -- -- -- -- -- -- - + -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- + -- -- -- -- -- -- -- anon | Cannot login | { } authenticator | No inheritance | { anon } gnawex_merchant | Cannot login , Bypass RLS | { anon } postgres | Superuser , Create role , Create DB , Replication , Bypass RLS | { } sekun | | { valid_user } valid_user | Cannot login | { } Here's a summary of what each of them does: anon : Public role. Can view listings, and items. authenticator : Role that is used to login. This role is still being worked on to really flesh out what it's supposed to do. gnawex_merchant : This isn't meant for anyone, rather this role is used to facilitate the exchanging of two listings. Since normal users cannot update their own listings, much more other people's listings, a special role needs to exist for that. You can think of it as GNAWEX updating the listings in your behalf when your listing gets matched with another. postgres : The highest role achievable. Can do anything. sekun : An example of a valid_user . You can ignore this since I just use this for testing. valid_user : This role is granted to users that are: 1) verified, and 2) not banned.","ref":"roles.html#database-roles","title":"Roles - Database roles","type":"extras"}]