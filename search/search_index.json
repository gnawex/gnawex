{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-,:!=\\[\\]()\"/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])"},"docs":[{"title":"What is GNAWEX?","text":"<p>GNAWEX is an independent third-party marketplace for MouseHunt where users can exchange items with super|BRIE+ as the main currency. It aims to provide a streamlined, simple, and automated experience like that of the in-game marketplace, while providing benefits like circumventing the 10% gold tax, and centralizing the item &amp; map current prices, price history, and price movements.</p> <p>The documentation follows RFC2219 for its use of must, should, and may.</p>","location":""},{"title":"Why GNAWEX and not <code>OTHER_PLATFORM</code>?","text":"<p>GNAWEX provides a more feature-complete experience vs the in-game marketplace, and a more automated experience vs the forum-like alternatives.</p> <p>Here's a matrix to provide a high-level comparison among the current platforms:</p>    Platform Accessible price history Automated matching Organized listings Trade items Mapping Can avoid 10% gold tax     GNAWEX       1   In-game Marketplace         Discord       1   Facebook Group       1      <ol> <li> <p>Avoids the 10% gold tax by transacting with super|BRIE+ as the currency\u00a0\u21a9\u21a9\u21a9</p> </li> </ol>","location":"#why-gnawex-and-not-other_platform"},{"title":"API Reference","text":"<p>WIP</p>","location":"api/"},{"title":"Roles","text":"<p>Roles are used to determine who can perform what operation in GNAWEX.</p>    Name Description     authenticator The entrypoint role that GNAWEX starts with.   anon The role that GNAWEX will switch to when the user is not authenticated.   verified_user The role that GNAWEX will switch to when the user is authenticated, and verified.   banned_user The role that GNAWEX will switch to when the user is authenticated, but banned.   auth Role that owns the <code>auth</code> schema.   api Role that owns the <code>api</code> schema.","location":"development/auth/roles/"},{"title":"User roles","text":"<p>These ones are defined with <code>CREATE TYPE ROLE as ENUM (...)</code>. These are the roles you'll see in GNAWEX. So far, none of these roles were worked on since the DB is still actively worked on.</p> <p>Although, here is what I have in mind:</p> <ul> <li><code>admin</code>: The system administrator</li> <li>Can appoint moderators</li> <li>Maintain <code>items</code></li> <li>Privileges like banning/unbanning users and mods</li> <li><code>mod</code>: Moderates the platform</li> <li><code>user</code>: Traders, basically</li> </ul> <p>Anything the user can do, the mod and admin can as well. So all roles here are able to create listings.</p>","location":"development/auth/roles/#user-roles"},{"title":"Database roles","text":"<p>Database roles exist because I'm deferring authorization to Postgres. You can get the list of roles in the DB by running this in <code>psql</code>: <code>\\du</code>; and this would show something like this:</p> <pre><code>gnawex_db=&gt; \\du\n                                        List of roles\n    Role name    |                         Attributes                         |  Member of\n-----------------+------------------------------------------------------------+--------------\n anon            | Cannot login                                               | {}\n authenticator   | No inheritance                                             | {anon}\n gnawex_merchant | Cannot login, Bypass RLS                                   | {anon}\n postgres        | Superuser, Create role, Create DB, Replication, Bypass RLS | {}\n sekun           |                                                            | {valid_user}\n valid_user      | Cannot login                                               | {}\n</code></pre> <p>Here's a summary of what each of them does:</p> <ul> <li><code>anon</code>: Public role. Can view listings, and items.</li> <li><code>authenticator</code>: Role that is used to login. This role is still being worked   on to really flesh out what it's supposed to do.</li> <li><code>gnawex_merchant</code>: This isn't meant for anyone, rather this role is used to   facilitate the exchanging of two listings. Since normal users cannot update   their own listings, much more other people's listings, a special role needs   to exist for that. You can think of it as GNAWEX updating the listings in   your behalf when your listing gets matched with another.</li> <li><code>postgres</code>: The highest role achievable. Can do anything.</li> <li><code>sekun</code>: An example of a <code>valid_user</code>. You can ignore this since I just use   this for testing.</li> <li><code>valid_user</code>: This role is granted to users that are: 1) verified, and 2) not   banned.</li> </ul>","location":"development/auth/roles/#database-roles"},{"title":"Available scripts","text":"<p>In the future, I'm going to rely on <code>Makefile</code> instead of <code>fish</code> scripts since it's tedious to manually load the script into the environment.</p>  <p>For these scripts to work, you need <code>psql</code> and <code>postgresql</code> setup. <code>psql</code> comes with <code>postgresql</code>.</p>","location":"development/introduction/available-scripts/"},{"title":"<code>migrate</code>","text":"<p>Takes all migration files from <code>migrations/</code>, and loads it in <code>gnawex_db</code>.</p> <pre><code># This is pretty much it\nmigrate\n</code></pre>","location":"development/introduction/available-scripts/#migrate"},{"title":"<code>seed-db</code>","text":"<p><code>seed-db</code> expects 1 argument, which can either be <code>dev</code>, or <code>prod</code>. If you're using this for a dev environment, use <code>dev</code>, otherwise if it's for production then use <code>prod</code>. You know how it goes. The seed files are in <code>seeds/</code> as <code>.csv</code> with headers, and delimited with <code>,</code>.</p> <p>Here are the files those two look for:</p> <ul> <li><code>seed-db dev</code></li> <li><code>seeds/users.csv</code>: Dummy users</li> <li><code>seeds/items.csv</code>: Tradable MouseHunt items</li> <li><code>seeds/listings.csv</code>: Dummy listings</li> <li><code>seed-db prod</code>: TODO</li> </ul>","location":"development/introduction/available-scripts/#seed-db"},{"title":"<code>drop-db</code>","text":"<p>Drops <code>gnawex_db</code>.</p>","location":"development/introduction/available-scripts/#drop-db"},{"title":"<code>reset-db</code>","text":"<p>This is a convenience function that resets <code>gnawex_db</code>.</p> <pre><code>drop-db\ncreatedb gnawex_db --user postgres\nmigrate\nseed-db dev\n\n# Or you could just run this:\nreset-db\n</code></pre>","location":"development/introduction/available-scripts/#reset-db"},{"title":"Setup","text":"<p>There isn't much to setup here since GNAWEX is still in its infancy. I'm currently working on the database side of things before I start working on the application-level, since PostgreSQL is surprisingly powerful, more than I definitely expected.</p>","location":"development/introduction/setup/"},{"title":"Database","text":"<p>I'm using version 14.1 of PostgreSQL, although 14.x should be fine. I don't guarantee backwards compatibility with &lt;14 because it's tiring.</p>","location":"development/introduction/setup/#database"},{"title":"Creating <code>gnawex_db</code>","text":"<p>If you're using NixOS, you're in luck. In your <code>configuration.nix</code> file, just add this:</p> <pre><code>services.postgresql = {\n  enable = true;\n  package = pkgs.postgresql_14;\n  authentication = pkgs.lib.mkOverride 14 ''\n    local all all trust\n    host all all localhost trust\n    host all all ::1/128 trust\n  '';\n};\n</code></pre> <p>This sets up a PostgreSQL server with a default user <code>postgres</code> (no password). You can create a user/role that matches with your OS' user so that you don't need to keep appending <code>psql</code>/<code>sqitch</code> commands with <code>-U postgres</code>, and <code>--db-user postgres</code> respectively. We'll get to what <code>sqitch</code> is in a bit.</p> <p>My OS user is <code>sekun</code>. Replace <code>sekun</code> with whatever yours is.</p> <pre><code>$ psql -U postgres\npostgres# CREATE ROLE sekun SUPERUSER CREATEDB CREATEROLE LOGIN;\nCREATE ROLE\n</code></pre> <p>This creates a passwordless role <code>sekun</code>. Now you can use <code>psql</code>/<code>sqitch</code> without specifying the <code>postgres</code> user.</p> <p>This project needs a database called <code>gnawex_db</code>. Create one with this: <code>createdb gnawex_db</code>.</p>","location":"development/introduction/setup/#creating-gnawex_db"},{"title":"Applying migrations","text":"<p>For schema migrations, I'm using <code>sqitch</code> out of convenience. If you're using <code>nix</code>, it should already be a part of the nix dev shell environment (how convenienit). If you're using something else, check out their website for installation instructions.</p> <p><code>sqitch</code> is interested in 3 folders: <code>deploy</code>, <code>revert</code>, and <code>verify</code>. <code>deploy</code> contains the migration scripts that you want to apply. <code>revert</code> when you want to rollback, and <code>verify</code> checks if things were applied as you expect them to be. These scripts are just plain SQL. Whatever is considered valid by PostgreSQL is fine.</p>  <p>By this stage, it is assumed that you've setup PostgreSQL 14.1, created <code>gnawex_db</code>, and have <code>sqitch</code> installed.</p>  <p>Example</p> <pre><code>[sekun@nixos:~/Projects/gnawex]$ sqitch deploy\nDeploying changes to db:pg:gnawex_db\n  + pgcrypto .......... ok\n  + citext ............ ok\n  + pgtap ............. ok\n  + app_schema ........ ok\n  + users ............. ok\n  + items ............. ok\n  + listings .......... ok\n  + transactions ...... ok\n  + match_listings .... ok\n  + roles ............. ok\n  + role_permissions .. ok\n</code></pre> <p>If ever something goes wrong, it'll revert it to the last change that succeeded. But that's what it looks like if all goes well.</p>","location":"development/introduction/setup/#applying-migrations"},{"title":"Viewing migration statuses","text":"<p>To see what migration <code>sqitch</code> has applied, you can use <code>sqitch status</code>:</p> <pre><code>[sekun@nixos:~/Projects/gnawex]$ sqitch status\n# On database db:pg:gnawex_db\n# Project:  gnawex\n# Change:   117b3847f4e26b654dcd925378ef7ff4810fd641\n# Name:     role_permissions\n# Deployed: 2022-03-08 16:20:32 +0800\n# By:       sekun &lt;sekun@nixos&gt;\n#\nNothing to deploy (up-to-date)\n</code></pre> <p>Here it tells you that the latest change is <code>role_permissions</code>. Which is good because at the time of writing, this is the latest migration we want. If you want to see the list of migrations planned, you can use <code>sqitch plan</code>:</p> <pre><code># Project: gnawex\n# File:    sqitch.plan\n\nDeploy 3d07e4afe1abd5eb6fbd5e350650da0535f89ccc\nName:      pgcrypto\nPlanner:   sekun &lt;sekun@nixos&gt;\nDate:      2022-03-08 11:53:13 +0800\n\n    For encryption\n\nDeploy 895451e8c444a571ae42a040d6496c14be5e6240\nName:      citext\nPlanner:   sekun &lt;sekun@nixos&gt;\nDate:      2022-03-08 11:53:41 +0800\n\n    For case-insensitive text\n\nDeploy 66bda001775a8d943894a15e9745a1cd985cfdbd\nName:      pgtap\nPlanner:   sekun &lt;sekun@nixos&gt;\nDate:      2022-03-08 11:54:07 +0800\n\n    For pg unit tests\n\nDeploy ea57600af26c2141dd329660db853152453ff934\nName:      app_schema\nPlanner:   sekun &lt;sekun@nixos&gt;\nDate:      2022-03-08 12:02:39 +0800\n\n    GNAWEX app schema\n\nDeploy cc0ce225344b889bcb8d42db3b501b8cca714f0e\nName:      users\nPlanner:   sekun &lt;sekun@nixos&gt;\nDate:      2022-03-08 12:04:23 +0800\n\n    GNAWEX users\n\nDeploy afb388906019a2959b671c76f625e939077a5848\nName:      items\nPlanner:   sekun &lt;sekun@nixos&gt;\nDate:      2022-03-08 14:56:21 +0800\n\n    Items that can be traded\n\nDeploy dbd0e796eacee0ef094baa45ffee698f760e541f\nName:      listings\n\n...\n</code></pre>","location":"development/introduction/setup/#viewing-migration-statuses"},{"title":"Rolling back migrations","text":"<p><code>sqitch revert</code></p> <p>WIP</p>","location":"development/introduction/setup/#rolling-back-migrations"},{"title":"<code>pgAdmin</code>","text":"<p><code>pgAdmin</code> can be pretty useful, and I personally use it for <code>EXPLAIN</code> to understand the query planner better. You can either set it up manually, or use nix.</p> <pre><code># At the project root, `gnawex/`\n\n# Run the nix shell. If you're using nix-direnv, then it should automatically\n# load the environment for you. So you can skip this, if ever.\nnix develop\n\n# If you're using sudo, replace doas with sudo\ndoas pgadmin4\n</code></pre> <p>You'll need elevated privileges since <code>pgadmin</code> needs write permissions in <code>/var/lib/pgadmin</code>. Doing this for the first time will ask for credentials you want to set, it doesn't really matter since it's just for a dev env, just remember it.</p> <p>You should see something like this:</p> <pre><code>sekun@nixos ~/P/gnawex (main) [1]&gt; doas pgadmin4\ndoas (sekun@nixos) password:\nNOTE: Configuring authentication for SERVER mode.\n\nEnter the email address and password to use for the initial pgAdmin user account:\n\nEmail address: postgres@example.com\nPassword:\nRetype password:\nStarting pgAdmin 4. Please navigate to http://127.0.0.1:5050 in your browser.\n2022-03-01 12:12:37,060: WARNING    werkzeug:   WebSocket transport not available. Install eventlet or gevent and gevent-websocket for improved performance.\n * Serving Flask app 'pgadmin' (lazy loading)\n * Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n * Debug mode: off\n</code></pre> <p><code>pgadmin</code> should be available in the URL specified above. In my case, it's http://127.0.0.1:5050.</p>","location":"development/introduction/setup/#pgadmin"},{"title":"Projects","text":"<p>Contains the list of projects to be implemented. Projects are more technical documents, and tend to be broken down forms of proposals.</p>","location":"projects/"},{"title":"0001 - Tradable Items","text":"<p> Proposal#0001</p>","location":"projects/0001-Tradable%20Items/"},{"title":"Tradable Items","text":"<p>Tradable items are items that are sent via the Send Supplies. GNAWEX must consistently keep an updated record of these items.</p>","location":"projects/0001-Tradable%20Items/#tradable-items"},{"title":"Operations","text":"<p>An item may be created, updated, and deleted. The delete operation must not be a hard delete (i.e DB row is removed). Rather, the <code>deleted_at</code> field is set, and will be considered to the back-end as non-existent.</p>","location":"projects/0001-Tradable%20Items/#operations"},{"title":"Permissions","text":"Role Read Create Update Delete     Admin       Moderator       User       Guest (non-logged in user)","location":"projects/0001-Tradable%20Items/#permissions"},{"title":"Database","text":"","location":"projects/0001-Tradable%20Items/#database"},{"title":"Tables","text":"","location":"projects/0001-Tradable%20Items/#tables"},{"title":"<code>app.tradable_items</code>","text":"Column name Description Type Required Nullable Default     <code>id</code> To uniquely identify the item <code>BIGINT GENERATED ALWAYS AS IDENTITY</code> <code>true</code> <code>false</code> Supplied by Postgres   <code>name</code> Name of an item <code>TEXT</code> <code>true</code> <code>false</code> -   <code>wiki_link</code> MH wiki link to item <code>TEXT</code> <code>true</code> <code>false</code> -   <code>description</code> The MH wiki description <code>TEXT</code> <code>true</code> <code>false</code> -   <code>created_at</code> To record when this was created <code>TIMESTAMP WITH TIME ZONE</code> <code>true</code> <code>false</code> <code>now()</code>   <code>updated_at</code> To record when this was updated <code>TIMESTAMP WITH TIME ZONE</code> <code>false</code> <code>true</code> <code>now()</code> (if updated, otherwise <code>null</code>)   <code>deleted_at</code> To record weth this was deleted <code>TIMESTAMP WITH TIME ZONE</code> <code>false</code> <code>true</code> <code>now</code> (if deleted, otherwise <code>null</code>)","location":"projects/0001-Tradable%20Items/#apptradable_items"},{"title":"0002 - Manage Tradable Item Listings","text":"<p> Proposal#0001</p>","location":"projects/0002-Manage%20Tradable%20Item%20Listings/"},{"title":"Description","text":"<p>A user must create an item listing if they wish to sell/buy an item on GNAWEX. The amount that the user must input must be how many they have in their inventory, and not based on how many they may have in the future - no matter how certain.</p>","location":"projects/0002-Manage%20Tradable%20Item%20Listings/#description"},{"title":"Operations","text":"<ul> <li>View active listings</li> <li>View inactive listings</li> <li>Create<ul> <li>Users may create up to 10 tradable item listings</li> </ul> </li> <li>Reduce quantity<ul> <li>Users must only be allowed to update the unit quantity, and only in amounts that are not in any non-cancelled transaction. e.g If I make a sell listing with an item quantity of 10, and 6 of it is involved in completed/pending transactions, then I can only reduce the quantity to a maximum of 4.</li> <li>Reducing the quantity to 0 will automatically delist</li> </ul> </li> <li>Relist: Puts the listing back on GNAWEX's active listings. Hence may be matched in the future. Can only relist if the item's available quantity is &gt;0.</li> <li>Delist: Removes the listing from GNAWEX's active listings. Hence must not be matched.</li> </ul>","location":"projects/0002-Manage%20Tradable%20Item%20Listings/#operations"},{"title":"Permissions","text":"Role View active listings View inactive listings Reduce quantity Relist Delist     Admin        Moderator        User   1  1  1  1   Guest (non-logged in user)","location":"projects/0002-Manage%20Tradable%20Item%20Listings/#permissions"},{"title":"Database","text":"","location":"projects/0002-Manage%20Tradable%20Item%20Listings/#database"},{"title":"Tables","text":"","location":"projects/0002-Manage%20Tradable%20Item%20Listings/#tables"},{"title":"<code>app.users</code>","text":"Column name Description Type Required Nullable Default     <code>id</code> User ID <code>BIGINT GENERATED ALWAYS AS IDENTITY</code> <code>true</code> <code>false</code> Supplied by Postgres   <code>hunter_id</code> The user's MouseHunt hunter ID <code>BIGINT</code> <code>true</code> <code>false</code> -   <code>username</code> Username used to log-in <code>CITEXT</code> (case insensitive text) <code>true</code> <code>false</code> -   <code>password</code> User's password <code>TEXT</code> (hashed) <code>true</code> <code>false</code> -   <code>role</code> User role <code>app.USER_ROLE('verified_user', 'unverified_user', 'banned_user')</code> <code>true</code> <code>false</code> <code>unverified_user</code>","location":"projects/0002-Manage%20Tradable%20Item%20Listings/#appusers"},{"title":"<code>app.tradable_item_listings</code>","text":"Column name Description Type Required Nullable Default     <code>id</code> To uniquely identify an item listing <code>BIGINT GENERATED ALWAYS AS IDENTITY</code> <code>true</code> <code>false</code> Supplied by Postgres   <code>user__id</code> To associate a listing to a user <code>BIGINT</code> <code>true</code> <code>false</code> -   <code>tradable_item__id</code> To associate listing to a tradable item <code>BIGINT</code> <code>true</code> <code>false</code> -   <code>type</code> What the user wants to do <code>app.LISTING_TYPE AS ENUM ('buy', 'sell')</code> <code>true</code> <code>false</code> -   <code>batched_by</code> Batches one or more of the same item to be sold as one unit for it to cost as a whole number <code>SMALLINT</code> <code>true</code> <code>false</code> <code>1</code>   <code>unit_quantity</code> Amount of units to be exchanged <code>INT</code> <code>true</code> <code>false</code> -   <code>current_unit_quantity</code> Current available amount of units that can be exchanged. i.e Units not tied to transactions <code>INT</code> <code>true</code> <code>false</code> -   <code>cost</code> How much one unit is in SB <code>INT</code> <code>true</code> <code>false</code> -   <code>active</code> Determines if an item is delisted or not <code>BOOLEAN</code> <code>true</code> <code>false</code> <code>true</code>   <code>created_at</code> To record when this was created <code>TIMESTAMP WITH TIME ZONE</code> <code>true</code> <code>false</code> <code>now()</code>   <code>updated_at</code> To record when this was updated <code>TIMESTAMP WITH TIME ZONE</code> <code>false</code> <code>true</code> <code>now()</code> (if updated, otherwise <code>null</code>)","location":"projects/0002-Manage%20Tradable%20Item%20Listings/#apptradable_item_listings"},{"title":"Functions","text":"","location":"projects/0002-Manage%20Tradable%20Item%20Listings/#functions"},{"title":"<code>app.adjust_item_listing</code>","text":"<p>Normalizes a listing's <code>batched_by</code>, <code>cost</code>, and <code>quantity</code> based on their GCD.</p>","location":"projects/0002-Manage%20Tradable%20Item%20Listings/#appadjust_item_listing"},{"title":"<code>app.set_listing_user_id</code>","text":"<p>Overrides the <code>user__id</code> field of a listing to whoever is authenticated via PG's settings.</p>","location":"projects/0002-Manage%20Tradable%20Item%20Listings/#appset_listing_user_id"},{"title":"Triggers","text":"","location":"projects/0002-Manage%20Tradable%20Item%20Listings/#triggers"},{"title":"<code>app.normalize_tradable_item_listing</code>","text":"<p>Before insert, <code>batched_by</code>, <code>cost</code>, and <code>quantity</code> must be normalized based on their GCD for GNAWEX to match item listings better. Also sets the <code>current_unit_quantity</code>.</p>","location":"projects/0002-Manage%20Tradable%20Item%20Listings/#appnormalize_tradable_item_listing"},{"title":"<code>app.set_listing_user_id</code>","text":"<p>Before insert, it triggers <code>app.set_listing_user_id()</code> which sets the user ID (owner) of the listing. The user ID is fetched from via <code>current_setting('auth.user_id', TRUE)</code>. Hence, has to be set via <code>set_config('auth.user_id', &lt;ID_#_AS_STRING&gt;, TRUE)</code>. It doesn't matter if the user ID isn't provided in the insert query itself, or if it even is because the above function will override it.</p>   <ol> <li> <p>Only for their own listings\u00a0\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>","location":"projects/0002-Manage%20Tradable%20Item%20Listings/#appset_listing_user_id_1"},{"title":"0003 - Automated Item Listings Matching","text":"<p> Proposal#0001</p>","location":"projects/0003-Automated%20Matching/"},{"title":"Description","text":"<p>Item listings may be matched by GNAWEX if it is able to. The matching will depend mainly on the listing's <code>type</code> (match buy with sell, and vice versa), <code>batched_by</code>, and <code>cost</code>. It should try to do the same with <code>unit_quantity</code>, but since the quantity doesn't have to match exactly for GNAWEX to do so, it isn't a hard requirement.</p> <p>The main priority is by listing date since matches should be done in a FIFO basis.</p>","location":"projects/0003-Automated%20Matching/#description"},{"title":"Permissions","text":"Role Avail automated matching feature     Admin    Moderator    User    Guest (non-logged in user)","location":"projects/0003-Automated%20Matching/#permissions"},{"title":"Database","text":"<p>The implementation of the matching may either be implemented in the DB-level, which has already been experimented in PR#35, or done in the application-level for reasons like type-safety. The former still requires all operations necessary to be in the same transaction, with 'safe enough' transaction settings.</p> <p>But should it be done in the DB-level, these are what's needed (at the top level):</p>","location":"projects/0003-Automated%20Matching/#database"},{"title":"Triggers","text":"","location":"projects/0003-Automated%20Matching/#triggers"},{"title":"<code>app.match_listings</code>","text":"<p>After insert, and for each row inserted to <code>app.tradable_item_listings</code>, the trigger will invoke the function below.</p>","location":"projects/0003-Automated%20Matching/#appmatch_listings"},{"title":"Functions","text":"","location":"projects/0003-Automated%20Matching/#functions"},{"title":"<code>app.match()</code>","text":"<p>Should match the listing that was inserted with all possible listings that fulfill its <code>unit_quantity</code>.</p>","location":"projects/0003-Automated%20Matching/#appmatch"},{"title":"0004 - Proof of Item Listing Match","text":"<p> Proposal#0001</p>","location":"projects/0004-Proof%20of%20Item%20Listing%20Match/"},{"title":"Description","text":"<p>Once GNAWEX finds one or more listings to match with the listing just created, it has to generate one or more proofs that the listings were indeed matched. This is the job for the Item Listing Transaction. The listing transaction(s) must start off as <code>PENDING</code> for the parties involved to execute the exchange in MouseHunt.</p> <p>If the completed transactions add up to any of the involved listings' quantity, then only the affected listings must be automatically delisted as it has nothing else to exchange.</p> <p>In the following diagram, we'll assume that all listings:</p> <ul> <li>are of item CRM; and</li> <li>cost the same SB</li> </ul> <pre><code>graph LR\n  LIST_ONE[/User: Larry&lt;br/&gt;Quantity: 25&lt;br/&gt;Batch: 4&lt;br/&gt;Type: Sell/] --&gt; TXN_ONE[Transact#1&lt;br/&gt;&lt;br/&gt;Quantity: 2];\n  LIST_TWO[/User: Bob&lt;br/&gt;Quantity: 2&lt;br/&gt;Batch: 4&lt;br/&gt;Type: Buy/] --&gt; TXN_ONE;\n  TXN_ONE --&gt; LIST_ONE_A[/User: Larry&lt;br/&gt;Quantity: 23&lt;br/&gt;Batch: 4&lt;br/&gt;Type: Sell/]\n  TXN_ONE --&gt; LIST_TWO_A[/User: Bob&lt;br/&gt;Quantity: 0&lt;br/&gt;Batch: 4&lt;br/&gt;Type: Buy/]\n\n  LIST_ONE_A --&gt; TXN_TWO[Transact#2&lt;br/&gt;&lt;br/&gt;Quantity: 22]\n  LIST_THREE[/User: Steve&lt;br/&gt;Quantity: 22&lt;br/&gt;Batch: 4&lt;br/&gt;Type: Buy/] --&gt; TXN_TWO\n  TXN_TWO --&gt; LIST_ONE_B[/User: Larry&lt;br/&gt;Quantity: 1&lt;br/&gt;Batch: 4&lt;br/&gt;Type: Sell/]\n  TXN_TWO --&gt; LIST_THREE_B[/User: Steve&lt;br/&gt;Quantity: 0&lt;br/&gt;Batch: 4&lt;br/&gt;Type: Buy/]</code></pre> <p>New listings must not be created as a result of the transaction output. Rather, this is just to show that provided with the transactions, we're able to determine what the final quantity is for the item listing. A copy of the quantity column will be created initally, and will be updated as transactions happen.</p>","location":"projects/0004-Proof%20of%20Item%20Listing%20Match/#description"},{"title":"Operations","text":"<ul> <li>Create pending: all transactions created must be <code>PENDING</code> first because GNAWEX does not execute the actual exchange in MouseHunt</li> <li>Cancel: if both parties mutually agree to terminate the exchange</li> <li>Complete: if both parties have performed the exchange in MouseHunt</li> </ul>","location":"projects/0004-Proof%20of%20Item%20Listing%20Match/#operations"},{"title":"Permissions","text":"Role Create pending TXN Cancel TXN Complete TXN     System      Admin      Moderator      User   1  1   Guest (non-logged in user)","location":"projects/0004-Proof%20of%20Item%20Listing%20Match/#permissions"},{"title":"Database","text":"","location":"projects/0004-Proof%20of%20Item%20Listing%20Match/#database"},{"title":"Tables","text":"","location":"projects/0004-Proof%20of%20Item%20Listing%20Match/#tables"},{"title":"<code>app.tradable_item_transactions</code>","text":"Column name Description Type Required Nullable Default     <code>id</code> To uniquely identify an item transaction <code>BIGINT GENERATED ALWAYS AS IDENTITY</code> <code>true</code> <code>false</code> Supplied by Postgres   <code>buy_item_listing_id</code> To associate a transaction to a buy listing <code>BIGINT</code> <code>true</code> <code>false</code> -   <code>sell_item_listing_id</code> To associate a transaction to a sell listing <code>BIGINT</code> <code>true</code> <code>false</code> -   <code>status</code> What the status is of the transaction <code>app.TRANSACTION_STATUS AS ENUM ('PENDING', 'COMPLETED', 'CANCELLED')</code> <code>true</code> <code>false</code> <code>PENDING</code>   <code>buyer_agreed</code> If the buyer agreed to the new status <code>BOOLEAN</code> <code>true</code> <code>false</code> <code>false</code>   <code>seller_agreed</code> If the seller agreed to the new status <code>BOOLEAN</code> <code>true</code> <code>false</code> <code>false</code>   <code>created_at</code> To record when this was created <code>TIMESTAMP WITH TIME ZONE</code> <code>true</code> <code>false</code> <code>now()</code>   <code>updated_at</code> To record when this was updated <code>TIMESTAMP WITH TIME ZONE</code> <code>false</code> <code>true</code> <code>now()</code> (if updated, otherwise <code>null</code>)   <code>quantity</code> Initial number of units that the user wants to sell/buy <code>INT</code> <code>true</code> <code>false</code> -   <code>current_quantity</code> Available number of units left <code>INT</code> <code>true</code> <code>false</code> <code>quantity</code>      <ol> <li> <p>Only for transactions they're involved in as the seller/buyer\u00a0\u21a9\u21a9</p> </li> </ol>","location":"projects/0004-Proof%20of%20Item%20Listing%20Match/#apptradable_item_transactions"},{"title":"Proposals","text":"<p>New features, fixes, refactors, and other types of changes need to first be discussed before it makes it way into being implemented. These changes are detailed in a proposal.</p>","location":"proposals/"},{"title":"0001 - Trade Items","text":"<p>Items that are allowed to be exchanged are ones (including gilded treasure maps) that may be traded via the Send Supplies option in a MouseHunt profile. These must be exchanged with/for SUPER|brie+ (SB).</p> <p>GNAWEX has to have the ff data for its items:</p> <ul> <li>Name</li> <li>Description</li> <li>Image</li> <li>MH Wiki link</li> </ul>","location":"proposals/0001-Trade%20Items/"},{"title":"Listings","text":"<p>Users may create listings for [[Items]] if they wish to exchange it. Item listings have two types: 1) BUY, and 2) SELL. A user may have more than one listing for the same item, as well as listings of opposite types.</p>  <p>Info</p> <p>A user may only have a max of 10 listings overall. i.e across different items, listing types, etc.</p>  <p>A simple listing will contain the ff data:</p> <ul> <li>User ID: User who created the listing</li> <li>Item ID: Item being exchanged</li> <li>Date created: Date the listing was created</li> <li>Type: BUY or SELL</li> <li>Cost: How much to buy/sell for</li> <li>Quantity: How many of something to exchange</li> </ul> <p>This might seem enough but one has to remember that not all items can be exchanged for a whole number amount of SB (e.g 0.5 SB for 1 Item A). At the same time, it's not possible to send 0.5 SB to someone! To include items with not-so-ideal costs, batching has to happen.</p>","location":"proposals/0001-Trade%20Items/#listings"},{"title":"Batching","text":"<p>A user could BUY/SELL by batches if the cost of an item is not a nice whole number. Say we have 100 of some Item A that we would like to SELL for 0.25 SB, we could batch it by 4s so that we could bump up the cost to 1 SB. Then, the minimum quantity that can be transacted will be 4x of Item A, and will at least cost 1 SB.</p> <p>Here's an example listing of the above:</p> <ul> <li>User: Larry</li> <li>Item: Calcified Rift Mist</li> <li>Type: <code>BUY</code></li> <li>Batch 4</li> <li>Quantity: 25</li> <li>Cost: 1</li> </ul> <p>Every 4 of CRM will be bought as one unit.</p>","location":"proposals/0001-Trade%20Items/#batching"},{"title":"Modifying a listing","text":"<p>Once posted, a listing cannot be deleted but its quantity may be edited but must take note of the following:</p> <ul> <li>The user can not increase the quantity of an active listing.</li> <li>The user may decrease the quantity of a listing as long as there is at least that much left not involved in a <code>PENDING</code> or <code>COMPLETED</code> transaction. e.g If the listing currently has a quantity of 25 that has yet to be involved in a <code>PENDING</code>/<code>COMPLETED</code> transaction, then they may reduce it by a max of 25.</li> </ul>","location":"proposals/0001-Trade%20Items/#modifying-a-listing"},{"title":"Closing a listing","text":"","location":"proposals/0001-Trade%20Items/#closing-a-listing"},{"title":"Automated","text":"<p>A listing must be automatically closed if the user reduces the listing quantity to 0, and if it is not involved in any <code>PENDING</code> transactions. Generally speaking, all listings must be closed when their quantities have been exchanged, and if all transactions facilitating those exchanges have <code>COMPLETED</code>.</p>","location":"proposals/0001-Trade%20Items/#automated"},{"title":"Manual","text":"<p>A user may close a listing without the \"reducing quantity to 0\" requirement. But they must settle all <code>PENDING</code> transactions first.</p>","location":"proposals/0001-Trade%20Items/#manual"},{"title":"Transactions (TXNs)","text":"<p>A transaction (TXN) is a proof that a match occurred between a BUY and a SELL listing that is automatically created by GNAWEX. It also details the quantity of an item that was transacted along with other metadata such as timestamps.</p> <p>The automated process will primarily rely on the listings' <code>cost</code>, <code>batched_by</code>, and <code>quantity</code>. The <code>cost</code> and <code>batched_by</code> have to be exactly the same, while the <code>quantity</code> only needs to match at least one. e.g quantities 1 and 10 will still match.</p>","location":"proposals/0001-Trade%20Items/#transactions-txns"},{"title":"Multiple TXNs of the same listing","text":"<p>It's possible for BUY listing to be matched with multiple SELL listings, and vice versa, if the BUY listing's quantity cannot be fulfilled by just one SELL listing.</p> <p>Here's an example:</p>  <p>Note</p> <p>The following tables are not supposed to be representations of the DB tables. Rather, just used to illustrate a point to the reader.</p> <p>We're also going to assume that the following listings are of the same item.</p>     ID User Type Batch QTY Cost     3 Larry BUY 4 100 1   2 Bob SELL 4 25 1   1 Steve SELL 4 50 1    <p>We know that Larry's listing can be matched with both Bob's and Steve's listings, and even more. Say Larry's listing is created after the others, this will trigger a match, and generate two transactions: a transaction between Larry and Bob, and one between Larry and Steve.</p>    Buy ID Sell ID Amount Status     3 2 25 PENDING   3 1 50 PENDING    <p>Item listings after the transactions:</p>    User Type Batch QTY Cost     Larry BUY 4 25 1   Bob SELL 4 0 1   Steve SELL 4 0 1    <p>Now, both Bob and Steve have their listings fulfilled while Larry needs one or more sellers to fulfill the last 25.</p>","location":"proposals/0001-Trade%20Items/#multiple-txns-of-the-same-listing"},{"title":"Status","text":"<p>Since we do not have access to MouseHunt's API, we cannot automatically fulfill the transaction in the users' behalf. Instead, we provide them with the other's information (like their Hunter ID) for them to fulfill the exchange, and then have them mark it as done.</p> <p>Here are the possible states (status) of a transaction:</p> <ul> <li><code>PENDING</code>: Newly created and has not yet been acted upon. This 'holds' the item quantity being transacted.</li> <li>Conclusive statuses</li> <li><code>COMPLETED</code>: When both parties complete the exchange on their end.   This indefinitely holds the item quantity being transacted.</li> <li><code>CANCELLED</code>: When a user gets cold feet and decides to not push through   with the exchange. This 'releases' the item quantity being transacted, and   thus may be involved in another future transaction.</li> </ul>  <p>Info</p> <p>To conclude a transaction, both parties (the buyer and seller) need to mark the transaction as such. Otherwise, the transaction will still be considered as <code>PENDING</code>.</p>  <p>tl;dr: <code>PENDING</code>, and <code>COMPLETED</code> transactions will hold their respective item quantities. When held, this will reduce the listing quantity by the transactions quantity. When <code>CANCELLED</code>, its quantity is restored back and may be involved in future transactions.</p>","location":"proposals/0001-Trade%20Items/#status"},{"title":"FAQ","text":"How do I match my item listing with another user's? <p>This is done automatically by GNAWEX.</p>   Why can't I trade SB for SB? <p>It's pointless!</p>   How do I create a transaction? <p>This must not be manually done. There is no need to manually ask another user if they would like to exchange something because GNAWEX performs the matching in behalf of the user. When GNAWEX does so, it also automatically creates a transaction linking these two listings together.</p>   What happens to the item quantity while the transaction is <code>PENDING</code>? <p>The quantity involved in the transaction must be held, and must not be involved in another transaction.</p>   What happens to the item quantity when the transaction is <code>CANCELLED</code>? <p>The quantity may be involved in another transaction.</p>   What happens to the item quantity when the transaction is <code>COMPLETED</code>? <p>It must not be involved in future transactions.</p>   May I modify a transaction's quantity? <p>No. Besides the transaction status, all of the other information must be handled by GNAWEX.</p>","location":"proposals/0001-Trade%20Items/#faq"},{"title":"0002 - Mapping","text":"<p>Most treasure maps cannot be traded normally, like an item (except for any gilded scroll case). For the ones that can, please check Items. Instead, a user would have to open a map scroll, then invite whoever they would like to invite into the map, or if a user wants to join a map, then they would have to request an invite.</p>","location":"proposals/0002-Mapping/"},{"title":"Map instances","text":"<p>GNAWEX must have a record of all treasure maps, which we may refer to as such. If a user opens it, then it's an instance of the treasure map, or a treasure map instance. The instance must contain all the relevant details needed to distinguish it from other instances.</p>  <p> </p> An opened map scroll with 5 out of 5 user slots filled. This is a map instance.   <p>Note</p> <p>Ideally, GNAWEX must automatically verify if the map even exists, and if the user creating the listing for it truly is the current maptain. But this might not be possible because of the restrictions around MH's API. Up for discussion.</p>  <p>An instance's MH map ID must be unique. One can get their MH map ID under Active Maps -&gt; Map they want to check -&gt; Hunters -&gt; Share. It looks something like this: https://www.mousehuntgame.com/tm.php?map_id=000000 wherein the sequence of 0s is the MH map ID.</p> <p>So, an instance must have the ff details:</p>    ID Map Record ID MH Map ID Delisted     The GNAWEX instance ID The ID of a GNAWEX map record Map ID of the instance in MouseHunt <code>true</code> | <code>false</code>    <p>Once delisted, they must not be able to reverse this action.</p>","location":"proposals/0002-Mapping/#map-instances"},{"title":"Restrictions","text":"<p>There are two types of maps: an event map, and a normal map. Since a user may have one active instance per type, the restriction follows as well. A user must only have at most two map instances, if one of it is a normal instance, and the other is an event instance. They must not be able to have more than one active normal instance, for example.</p> <p>If the user wishes to create another instance, they must delist their active instance first.</p>","location":"proposals/0002-Mapping/#restrictions"},{"title":"Instance roles","text":"<p>In an instance, the maptain must specify what role(s) they would like to invite. The number of roles that they may invite depends on the number of available slots that the map has.</p> <p>These roles that the maptain may look for have specific duties to fulfill (the who invites). Others may also look for maps that have these roles available for invite (the joiner). The roles are best described by Aardwolf's mapping 103 guide. In short: a user may invite in at least one role, or join as only one role.</p> <p>These are the supported roles that may be invited to an instance:</p>    Role name Description Permanent slot Slots consumed Keeps chest contents Pays to current Maptain for slot     Maptain Map captain. Buying this role means you're buying the entire map. Yes All Yes Yes   Helper Helps complete the map Yes 1 Yes No   Sniper/Looter Clears off mice/items from the treasure map. Does not include LM/LL. No None No No, gets paid by maptain.   Leecher Doesn't help with the map Yes 1 Yes Yes   Duster Like leecher but dusts map with RMD Yes 1 Yes Less to none. May get paid.   Closer Like leecher but catches LM/LL Yes 1 Yes Discounted","location":"proposals/0002-Mapping/#instance-roles"},{"title":"Role listings","text":"<p>A role listing describes a user's intent to invite others to/participate in a map instance. Hence, these can be categorized into two types: an invite listing, and a join request listing.</p> <p>Depending on the role, certain columns may be set; for others, maybe not. But here's what all role listings must have recorded:</p>    Listing ID Role Type     Role listing ID Any supported role <code>INVITE</code> or <code>JOIN</code>","location":"proposals/0002-Mapping/#role-listings"},{"title":"Roles, in-depth","text":"","location":"proposals/0002-Mapping/#roles-in-depth"},{"title":"Maptain","text":"<p>Giving away a maptain role means that you're going to give the entirety of an already-opened map. A user must not be able to sell a maptain alongside other roles because there are no other slots/roles that can be added. A user also must not be able to pick the maptain role to both invite/join for scroll cases that can be traded. But their dusted counterparts are eligible.</p>    Listing ID Instance ID Role Type Cost     Role listing ID ID of the map instance in GNAWEX <code>MAPTAIN</code> <code>INVITE</code> If <code>INVITE</code>, current maptain is asking for this much for the other maptain to take over. If <code>JOIN</code>, user who wants to become the new maptain would pay the current one this much.     <p>Note</p> <p>The old and new maptain must mark the transaction as complete as soon as the old maptain invites the new one, AND [the old maptain] leaves the map.</p>","location":"proposals/0002-Mapping/#maptain"},{"title":"Sniper/Looter","text":"<p>Sniper/looter roles are considered temporary roles in a map instance because they do not stick around when it's complete (for the map chest). GNAWEX must also keep a record of all possible mice for the snipers and maptains to select.</p> <p>For the maptain:</p>    Listing ID Instance ID Role Type Cost Mouse ID     Role listing ID ID of the map instance in GNAWEX <code>SNIPER</code> <code>INVITE</code> Amount for the maptain to pay for service Mouse to snipe    <p>For the sniper:</p>    Listing ID Role Type Cost Mouse ID     Role listing ID <code>SNIPER</code> <code>JOIN</code> Amount the sniper wants to be paid by the maptain for their service Mouse to snipe    <p>The sniper must not need to specify the instance, nor the map because all they're concerned with is dealing with the mouse/loot, nothing else.</p> <p>Here's what the flow looks like:</p> <ol> <li>Maptain creates an invite listing with one available role: a sniper role and chooses the mouse/item to snipe/loot</li> <li>Match happens</li> <li>Sniper/looter clicks link and requests to join</li> <li>Maptain accepts invite</li> <li>Sniper/looter does their job &amp; leaves</li> <li>Maptain and sniper/looter mark the transaction as complete</li> <li>GNAWEX frees up one extra role for the instance</li> </ol> <p>With this, the maptain may look for a new role to invite.</p>  <p>Note</p> <p>The maptain and sniper/looter must both mark the transaction as <code>COMPLETE</code> when as soon as the sniper/looter completes their job and gets paid.</p>","location":"proposals/0002-Mapping/#sniperlooter"},{"title":"Helpers","text":"<p>Since helpers are expected help out with the map, no payment is involved.</p> <p>For the maptain:</p>    Listing ID Instance ID Role Type     Role listing ID ID of the map instance in GNAWEX <code>HELPER</code> <code>INVITE</code>    <p>For the helper:</p>    Listing ID Map ID Role Type     Role listing ID ID of the map record in GNAWEX <code>HELPER</code> <code>JOIN</code>    <p>The helper must specify what kind of map they would like to help out with, but must not need to specify a particular instance because the matching is done by GNAWEX.</p>","location":"proposals/0002-Mapping/#helpers"},{"title":"Leechers","text":"<p>Leechers are not expected to help out with the map, and they need to pay the maptain to join.</p> <p>For the maptain:</p>    Listing ID Instance ID Role Type Cost     Role listing ID ID of the map instance in GNAWEX <code>LEECHER</code> <code>INVITE</code> Amount the maptain will charge the leecher    <p>For the leecher:</p>    Listing ID Map ID Role Type Cost     Role listing ID ID of the map record in GNAWEX <code>LEECHER</code> <code>JOIN</code> Amount the leecher will pay the maptain to join","location":"proposals/0002-Mapping/#leechers"},{"title":"Dusters","text":"<p>Dusters are like leechers, but must dust the map. So they either get charged much less, or even get paid. If the maptain will pay the duster, then they must not set how much they [the maptain] will get paid.</p> <p>For the maptain:</p>    Listing ID Instance ID Role Type Cost for duster to get paid Cost for maptain to get paid     Role listing ID ID of the map instance in GNAWEX <code>DUSTER</code> <code>INVITE</code> How much duster will earn How much maptain will earn    <p>For the leecher:</p>    Listing ID Map ID Role Type Cost for duster to get paid Cost for maptain to get paid     Role listing ID ID of the map record in GNAWEX <code>DUSTER</code> <code>JOIN</code> How much duster will earn How much maptain will earn","location":"proposals/0002-Mapping/#dusters"},{"title":"Closers","text":"<p>Closers are like leechers. Except they must get the LM/LL, and they must pay the maptain to join. But a discount is usually provided.</p> <p>For the maptain:</p>    Listing ID Instance ID Role Type Cost     Role listing ID ID of the map instance in GNAWEX <code>CLOSER</code> <code>INVITE</code> Amount the maptain will charge    <p>For the closer:</p>    Listing ID Map ID Role Type Cost     Role listing ID ID of the map record in GNAWEX <code>CLOSER</code> <code>JOIN</code> Amount the closer will pay the maptain to join     <p>Note</p> <p>When the map is closed/complete for the helpers/leechers/dusters/closers, all parties involved must mark the transaction as <code>COMPLETED</code>.</p>","location":"proposals/0002-Mapping/#closers"},{"title":"Role restrictions","text":"<p>Here are the current role restrictions:</p>    Role name Min. number Max number     Maptain 0 1 (blocks current maptain from inviting other roles)   Helper 0 Max slots - 1   Sniper/looter 0 Max slots - 1   Duster 0 1   Leecher 0 Max slots - 1   Closer 0 1     <p>Info</p> <p>While the minimums are 0, the listing must have one role per slot to be sold.</p>","location":"proposals/0002-Mapping/#role-restrictions"},{"title":"Create a join request listing","text":"<p>A user may create a join request listing but must only be allowed to pick one role to join as. If they want to be two roles for the same kind of map (e.g Nice List), then they must create two join request listings. If their listing gets matched with another, all of their other join request listings will be temporarily delisted until the transaction is complete.</p> <p>They may also choose their preferred LM, or select a group of mice that they would like to have as the LM. If they do not choose a LM, then this means anything goes.</p>","location":"proposals/0002-Mapping/#create-a-join-request-listing"},{"title":"Create an invite listing","text":"<p>Warning</p> <p>You must be the current maptain to be able to create an invite listing.</p>  <p>An invite listing means the maptain is looking to invite others to the map to fulfill a single role. A maptain may have multiple role invite listnings if they need to look for multiple roles.</p>","location":"proposals/0002-Mapping/#create-an-invite-listing"},{"title":"Updating a listing","text":"<p>A role listing may be updated but restrictions apply. Generally speaking, a listing must not be updated if it has already concluded.</p>","location":"proposals/0002-Mapping/#updating-a-listing"},{"title":"Invite listing","text":"<p>A maptain may add new roles, or remove unfilled roles. They must not remove roles that are involved in a <code>PENDING</code> or <code>COMPLETED</code> transaction.</p>","location":"proposals/0002-Mapping/#invite-listing"},{"title":"Concluding a listing","text":"<p>A role listing must be considered concluded if it was <code>CANCELLED</code>, or <code>COMPLETED</code>.</p>","location":"proposals/0002-Mapping/#concluding-a-listing"},{"title":"Transactions","text":"","location":"proposals/0002-Mapping/#transactions"},{"title":"Status","text":"<ul> <li><code>PENDING</code> - If the joiner is still fulfilling their duties/waiting for the map to complete/close. This must 'hold' the role.</li> <li><code>COMPLETED</code> - When the joiner has fulfilled their duties/the map is completed. This must 'indefinitely' hold the role.</li> <li><code>CANCELLED</code> - If both the maptain and the joiner are in mutual agreement, and decide to back off of their deal. Both need to mark it as <code>CANCELLED</code> otherwise it will not be marked as such. Cancelling must release the role back.</li> </ul>","location":"proposals/0002-Mapping/#status"},{"title":"FAQ","text":"<p>WIP</p>","location":"proposals/0002-Mapping/#faq"}]}